// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package planner is a generated GoMock package.
package planner

import (
	context "context"
	network "github.com/estafette/estafette-gcp-network-planner/api/network/v1"
	gomock "github.com/golang/mock/gomock"
	compute "google.golang.org/api/compute/v1"
	net "net"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// LoadConfig mocks base method
func (m *MockService) LoadConfig(ctx context.Context) (*network.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfig", ctx)
	ret0, _ := ret[0].(*network.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfig indicates an expected call of LoadConfig
func (mr *MockServiceMockRecorder) LoadConfig(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfig", reflect.TypeOf((*MockService)(nil).LoadConfig), ctx)
}

// Suggest mocks base method
func (m *MockService) Suggest(ctx context.Context, region, filter string, networkTypes ...network.Type) (map[network.Type]*net.IPNet, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, region, filter}
	for _, a := range networkTypes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Suggest", varargs...)
	ret0, _ := ret[0].(map[network.Type]*net.IPNet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Suggest indicates an expected call of Suggest
func (mr *MockServiceMockRecorder) Suggest(ctx, region, filter interface{}, networkTypes ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, region, filter}, networkTypes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suggest", reflect.TypeOf((*MockService)(nil).Suggest), varargs...)
}

// SuggestSingleNetworkRange mocks base method
func (m *MockService) SuggestSingleNetworkRange(ctx context.Context, rangeConfigs []network.RangeConfig, subnetworks []*compute.Subnetwork, region string, networkType network.Type) (*net.IPNet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestSingleNetworkRange", ctx, rangeConfigs, subnetworks, region, networkType)
	ret0, _ := ret[0].(*net.IPNet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestSingleNetworkRange indicates an expected call of SuggestSingleNetworkRange
func (mr *MockServiceMockRecorder) SuggestSingleNetworkRange(ctx, rangeConfigs, subnetworks, region, networkType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestSingleNetworkRange", reflect.TypeOf((*MockService)(nil).SuggestSingleNetworkRange), ctx, rangeConfigs, subnetworks, region, networkType)
}
